#!/usr/bin/env bash
NAME=${0##*/}
INTERVAL=${INTERVAL:-1} # calling interval (from cron) in minutes
LOCKER=${LOCKER:-kscreenlocker_greet}
DB=/var/lib/$NAME/czasy.log
CFG=/etc/$NAME.cfg
LCK=/var/lock/$NAME.lock
debug() { [[ -v DEBUG ]] && echo "$*" >>"/tmp/$NAME.debug.log"; }

set -C
set -o pipefail
shopt -s extglob

# use lock mechanism and check data file access
echo $$ >"$LCK" || exit 1
trap 'e=$?; rm -f "$LCK"; exit $e' INT TERM EXIT

type loginctl ps &>/dev/null || exit 2
: >>"$DB"

for seat in $(loginctl list-seats --no-legend); do
  asess=$(loginctl show-seat --value -p ActiveSession $seat)
  [[ ! "$asess" || $(ps -C $LOCKER -o seat=,lsession=) =~ ^$seat\ +$asess$ ]] && continue
  auser=$(loginctl show-session --value -p Name $asess)
  [[ "$auser" == root || $(loginctl show-session --value -p Class $asess) != user ]] && continue

  # update data file
  printf -v date '%(%F)T'
  printf -v time '%(%R)T'; time=${time#0}
  { while read -r line; do
    [[ "$line" =~ ^$date,$auser,([0-9]{1,2}:[0-9]{2}),[0-9:]{4,5},([0-9]{1,})$ ]] \
      && old=${BASH_REMATCH[2]} from=${BASH_REMATCH[1]} \
      || echo "$line"
    done <"$DB"
    # as this is longer will overwrite rest of file
    echo "$date,$auser,${from:=$time},$time,${new:=$((${old:-0}+INTERVAL))}"
  } 1<>"$DB"

  continue # FIXME
  # check defined limits in cfg file
  [[ -r "$CFG" && $(<"$CFG") =~ (^|$'\n')$auser,([0-9]{1,})(,([0-9]{1,2}:[0-9]{2}),([0-9]{1,2}:[0-9]{2}))($'\n'|$) ]] \
    && limit=${BASH_REMATCH[2]} lfrom=${BASH_REMATCH[4]} lto=${BASH_REMATCH[5]}
  #debug "$auser:" $"limit ${limit:-brak}, wykorzystał $new minut (od $from do $time)"${limit:+$", pozostało $((rem=limit-new)) minut"}
  debug "$auser:" $"limit ${limit:-none}, used $new minute(s) (from $from to $time)"${limit:+$", remaining $((rem=limit-new)) minute(s)"}
  [[ "$limit" ]] || exit 0

  # display information popups
  popup() {
    LC_ALL='pl_PL.UTF-8' # for displaying weekday name
  #  title=$"Limitowanie czasu, $(printf '%(%A)T') $time"
    title=$"Time limiting, $(printf '%(%A)T') $time"
    icon="appointment-$2-symbolic"
    su "$auser" -c "$display notify-send -u \"$1\" -t \"${3}000\" -i \"$icon\" \"$title\" \"${auser^}\n$4\""
  }

  if [[ ! "$old" ]]; then
  #  popup low new 30 $"Twój limit czasu na dziś to $limit minut."
    popup low new 30 $"Your time limit for today is $limit minute(s)."
  elif [[ ' 10 5 4 3 2 1 ' == *" $rem "* ]]; then
  #  popup normal soon 30 $"Pozostało ci dziś tylko $rem minut!"
    popup normal soon 30 $"You have only $rem minute(s) today!"
  elif [[ $rem -le 0 ]]; then
  #  popup critical missed 10 $"Niestety, twój czas na dziś ($limit minut) się skończył!"
    popup critical missed 10 $"Sorry, your time limit ($limit minute(s)) has run out!"
    lock=10
  fi

  # lock session if required
  if [[ "$lock" ]]; then
    sleep "$lock"
    #su "$auser" -c "$display qdbus org.freedesktop.ScreenSaver /ScreenSaver Lock 2>&-"
    su "$auser" -c "$display qdbus org.freedesktop.ScreenSaver /KSMServer logout 0 0 2"
  fi
done